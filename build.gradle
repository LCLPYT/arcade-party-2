plugins {
    id 'java'
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
    id 'gradle-build-utils' version '1.7.0'
}

Properties props = buildUtils.loadProperties('publish.properties')

group = project.maven_group
version = buildUtils.gitVersion()

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()

    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }

    maven {
        url "https://repo.lclpnet.work/repository/snapshots"
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        url = 'https://maven.nucleoid.xyz/'
    }
}

loom {
    // if you want to develop a plugin for dedicated servers, uncomment the following block
    serverOnlyMinecraftJar()

    runs {
        remove client

        server {
            vmArgs "-Dfabric-tag-conventions-v2.missingTagTranslationWarning=SILENCED"
        }
    }

    accessWidenerPath = file("src/main/resources/ap2.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu:${project.kibu_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu-world-api:${project.kibu_world_api_version}"
    modImplementation "xyz.nucleoid:fantasy:${project.fantasy_version}"
    modImplementation "maven.modrinth:sqlite-jdbc:3.41.2.1+20230506"
    modImplementation "work.lclpnet.mods:combat-control:${project.combat_control_version}"
    modImplementation "work.lclpnet.mods:notica:${project.notica_version}"
    modImplementation "work.lclpnet.mods:mg-lobby:${project.lobby_version}"

    // optional runtime dependencies (not explicitly required for compilation, but needed to play the game)
    modLocalRuntime "work.lclpnet.mods:pal:${project.pal_version}"
    modLocalRuntime "work.lclpnet.mcserver-api:mcserver-api-fabric:${project.mcserver_api_version}"
    implementation "work.lclpnet:translations4j:${project.translations4j_version}"
    implementation "work.lclpnet:translations4j:${project.translations4j_version}:network"

    implementation 'org.json:json:20231013'
    include(implementation('work.lclpnet:json-config4j:1.0.0'))
    include(implementation('org.apache.commons:commons-compress:1.26.2'))

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
    testImplementation 'org.xerial:sqlite-jdbc:3.41.2.2'
}

test {
    useJUnitPlatform()
    systemProperty('fabric.side', 'server')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(21)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

[jar, sourcesJar].each {
    it.from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.base.archivesName.get()

            from components.java

            pom {
                name = 'Arcade Party 2'
                description = 'Reworked ArcadeParty as Fabric mini-game.'
            }
        }
    }

    buildUtils.setupPublishRepository(repositories, props)
}